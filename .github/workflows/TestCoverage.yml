name: CI Workflow

on:
  push:
    branches: [ "CICDTestingBranch" ]
##gasdasdfagsd
jobs:
  # Job 1: Build
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 httpx requests  # Install requests and other dependencies here
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  # Job 2: Test
  test:
    needs: build  # This job will only run after the 'build' job has completed
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest pytest-cov httpx requests  # Install dependencies for testing
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi


      # Start the API server in the background and log output
      - name: Start API server
        run: |
          mkdir -p PythonAPI/api/logs
          nohup python PythonAPI/api/main.py > PythonAPI/api/logs/server.log 2>&1 &  # Run the server and log output
          sleep 10  # Allow more time for the server to start up

      # Check if the server is running
      - name: Check if server is running
        run: |
          curl -f http://localhost:3000 || (tail -n 10 PythonAPI/api/logs/server.log && exit 1)  # Check if the server is responding

      # Test with pytest, passing the API key as part of the request
      - name: Test with pytest
        env:
          API_KEY: ${{ secrets.API_KEY }}  # Passing the secret API_KEY to the test
        run: |
          pytest  # Run the tests

      - name: Run code coverage
        run: |
          coverage report --format=markdown >> $GITHUB_STEP_SUMMARY
          coverage report --fail-under=80  # Fail the build if coverage is below 80%

      - name: Store coverage report
        uses: actions/upload-artifact@v4
        with:
          path: coverage.xml  # Store the coverage XML report
        if: ${{ failure() }}  # Upload only if the tests fail

  # Job 3: Deployment to Production
  deployment:
    needs: test  # This job will run after the 'test' job has completed
    runs-on: ubuntu-latest
    environment: production  # This is where the deployment happens
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt  # Install production dependencies
      - name: Deploy to Production
        run: |
          echo "Deploying application to production environment..."
          # Add your deployment-specific steps here
          # Example: ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SERVER_IP }} 'bash /path/to/deploy.sh'
