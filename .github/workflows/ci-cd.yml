name: CI/CD Workflow for CSharpAPI

on:
  push:
    branches: [ "Development_CI/CD#2.4", "master" ]
  pull_request:
    branches: [ "Development_CI/CD#2.4", "master" ]

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_PATH: './CSharpAPI/CSharpAPI.csproj'
  TEST_PROJECT_PATH: './Integration.Tests/Integration.Tests.csproj'
  UNIT_TEST_PROJECT_PATH: './Unit.Tests/Unit.Tests.csproj'
  MINIMUM_CODE_COVERAGE: 1

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: |
          dotnet restore ${{ env.PROJECT_PATH }}
          dotnet restore ${{ env.TEST_PROJECT_PATH }}
          dotnet restore ${{ env.UNIT_TEST_PROJECT_PATH }}

      - name: Build
        run: dotnet build ${{ env.PROJECT_PATH }} --configuration Release --no-restore

      - name: Run Integration Tests
        run: |
          dotnet test ${{ env.TEST_PROJECT_PATH }} \
            --configuration Release \
            --no-restore \
            --verbosity normal \
            --collect:"XPlat Code Coverage" \
            /p:CollectCoverage=true \
            /p:CoverletOutput=./TestResults/Coverage/ \
            /p:CoverletOutputFormat=cobertura

      - name: Run Unit Tests
        run: |
          dotnet test ${{ env.UNIT_TEST_PROJECT_PATH }} \
            --configuration Release \
            --no-restore \
            --verbosity normal \
            --collect:"XPlat Code Coverage" \
            /p:CollectCoverage=true \
            /p:CoverletOutput=./TestResults/Coverage/ \
            /p:CoverletOutputFormat=cobertura

      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

      - name: Generate coverage report
        run: |
          reportgenerator \
          "-reports:./Integration.Tests/TestResults/Coverage/coverage.cobertura.xml;./Unit.Tests/TestResults/Coverage/coverage.cobertura.xml" \
          "-targetdir:coveragereport" \
          "-reporttypes:Html;TextSummary"

      - name: Create publish output
        if: success()
        run: dotnet publish ${{ env.PROJECT_PATH }} -c Release -o ./publish

      - name: Upload build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: ./publish

  deployment:
      needs: build-and-test
      if: github.ref == 'refs/heads/master' && needs.build-and-test.result == 'success'
      runs-on: ubuntu-latest
      steps:
        - name: Download artifacts
          uses: actions/download-artifact@v4
          with:
            name: build-artifacts
            path: ./publish
          
        - name: Setup SSH Key
          run: |
            mkdir -p ~/.ssh
            echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
            chmod 600 ~/.ssh/deploy_key
            echo "Host your-server\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile=/dev/null" >> ~/.ssh/config
          
        - name: Deploy to Production
          run: |
            echo "Deploying to production server"
            scp -i ~/.ssh/deploy_key ./publish/* user@your-server:/path/to/deploy
            ssh -i ~/.ssh/deploy_key user@your-server 'sudo systemctl restart your-service'
          env:
            SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
            SERVER_USER: your-username
            SERVER_IP: your-server-ip
          
        - name: Notify Deployment Success
          if: success()
          run: |
            curl --request POST \
            --url https://api.sendgrid.com/v3/mail/send \
            --header "Authorization: Bearer ${{ secrets.SENDGRID_API_KEY }}" \
            --header 'Content-Type: application/json' \
            --data '{
              "personalizations": [{"to": [{"email": "awjvaneggermond@hotmail.com"}]}],
              "from": {"email": "no-reply@example.com"},
              "subject": "Successful Deployment to Production",
              "content": [{"type": "text/plain", "value": "Deployment of ${{ github.repository }} to production was successful."}]
            }'
