name: CI/CD Workflow for CSharpAPI

on:
  push:
    branches: [ "CI/CD_C#2.0", "master" ]
  pull_request:
    branches: [ "CI/CD_C#2.0", "master" ]

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_PATH: './CSharpAPI/CSharpAPI.csproj'
  TEST_PROJECT_PATH: './Integrationtest/Integrationtest.csproj'
  MINIMUM_CODE_COVERAGE: 80

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore ${{ env.PROJECT_PATH }}

      - name: Build solution
        run: dotnet build ${{ env.PROJECT_PATH }} --configuration Release --no-restore

      - name: Create publish output
        run: dotnet publish ${{ env.PROJECT_PATH }} -c Release -o ./publish

      - name: Generate API Documentation
        run: |
          dotnet tool install -g Swashbuckle.AspNetCore.Cli
          swagger tofile --output ./publish/swagger.json ./publish/CSharpAPI.dll v1

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: ./publish
          retention-days: 5

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Run Tests with Coverage
        run: |
          dotnet test ${{ env.TEST_PROJECT_PATH }} \
            --collect:"XPlat Code Coverage" \
            --settings ./coverage.runsettings \
            --logger "trx;LogFileName=test-results.trx"

      - name: Check Code Coverage Threshold
        run: |
          coverage_percentage=$(grep -oP '(?<=Line coverage:)[^%]*' coverage/coverage.info)
          if (( $(echo "$coverage_percentage < $MINIMUM_CODE_COVERAGE" | bc -l) )); then
            echo "Code coverage is below minimum threshold of $MINIMUM_CODE_COVERAGE%"
            exit 1
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: TestResults
          retention-days: 5

  security:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run SAST Scan
        uses: github/codeql-action/analyze@v2
        with:
          languages: csharp

      - name: Run Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'CSharpAPI'
          format: 'HTML'
          out: 'reports'

      - name: Run Container Scan
        uses: azure/container-scan@v0
        with:
          image-name: your-registry/csharp-api:${{ github.sha }}

  docker:
    needs: [test, security]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: your-registry/csharp-api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    needs: docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Deploy to Staging
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'staging-api'
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          images: your-registry/csharp-api:${{ github.sha }}

  deploy-production:
    needs: [deploy-staging]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Deploy to Production
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'production-api'
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          images: your-registry/csharp-api:${{ github.sha }}

  notify:
    needs: [deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Teams
        uses: aliencube/microsoft-teams-actions@v0.8.0
        with:
          webhook_uri: ${{ secrets.TEAMS_WEBHOOK_URL }}
          title: 'Deployment Status'
          text: 'Deployment to ${{ github.ref }} completed with status: ${{ job.status }}'