name: CI/CD Pipeline

on:
  push:
    branches: 
      - main
      - develop
  pull_request:
    branches: 
      - main
      - develop

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_PATH: './CSharpAPI/CSharpAPI.csproj'
  TEST_PROJECT_PATH: './Integration.Tests/Integration.Tests.csproj'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: |
          dotnet restore ${{ env.PROJECT_PATH }}
          dotnet restore ${{ env.TEST_PROJECT_PATH }}

      - name: Build
        run: dotnet build ${{ env.PROJECT_PATH }} -c Release --no-restore

      - name: Run tests
        run: dotnet test ${{ env.TEST_PROJECT_PATH }} -c Release --no-build

      - name: Run code coverage
        run: |
          dotnet test ${{ env.TEST_PROJECT_PATH }} \
            /p:CollectCoverage=true \
            /p:CoverletOutputFormat=cobertura \
            /p:CoverletOutput=./coverage/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: 'csharp'

      - name: Build
        run: dotnet build ${{ env.PROJECT_PATH }}

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  deployment:
    needs: [build-and-test, code-quality]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Publish
        run: dotnet publish ${{ env.PROJECT_PATH }} -c Release -o ./publish

      - name: Deploy to Production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /path/to/your/application
            sudo systemctl stop your-application
            rm -rf /path/to/your/application/*
            scp -r ${{ github.workspace }}/publish/* ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/path/to/your/application/
            sudo systemctl start your-application

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ./publish/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}