name: CI/CD Workflow for CSharpAPI

on:
  push:
    branches: [ "CI/CD_C#2.0", "master" ]
  pull_request:
    branches: [ "CI/CD_C#2.0", "master" ]

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_PATH: './CSharpAPI/CSharpAPI.csproj'
  TEST_PROJECT_PATH: './Integration.Tests/Integration.Tests.csproj'
  MINIMUM_CODE_COVERAGE: 80

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: |
          dotnet restore ${{ env.PROJECT_PATH }}
          dotnet restore ${{ env.TEST_PROJECT_PATH }}

      - name: Build solution
        run: dotnet build ${{ env.PROJECT_PATH }} --configuration Release --no-restore

      - name: Create publish output
        run: dotnet publish ${{ env.PROJECT_PATH }} -c Release -o ./publish

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: ./publish
          retention-days: 5

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./publish

      - name: Restore test project dependencies
        run: dotnet restore ${{ env.TEST_PROJECT_PATH }}

      - name: Run Tests
        run: dotnet test ${{ env.TEST_PROJECT_PATH }} --configuration Release --no-restore

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: TestResults
          retention-days: 5

  security-scan:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Run Dependency Check
        run: |
          dotnet restore ${{ env.PROJECT_PATH }}
          dotnet list ${{ env.PROJECT_PATH }} package --vulnerable --include-transitive

      - name: Install dependencies for Snyk
        run: |
          cd CSharpAPI
          dotnet restore

      - name: Run Snyk Security Scan
        uses: snyk/actions/dotnet@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  deployment:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./publish

      - name: Deploy to Production
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
        run: |
          echo "$SSH_PRIVATE_KEY" > deploy_key
          chmod 600 deploy_key
          
          # Stop the service
          ssh -i deploy_key -o StrictHostKeyChecking=no $SSH_USER@$SERVER_IP "sudo systemctl stop csharpapi"
          
          # Deploy new version
          scp -i deploy_key -o StrictHostKeyChecking=no -r ./publish/* $SSH_USER@$SERVER_IP:/var/www/csharpapi/
          
          # Start the service
          ssh -i deploy_key -o StrictHostKeyChecking=no $SSH_USER@$SERVER_IP "sudo systemctl start csharpapi"
          
          rm -f deploy_key

  notification:
    needs: [deployment]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Teams
        uses: aliencube/microsoft-teams-actions@v0.8.0
        with:
          webhook_uri: ${{ secrets.TEAMS_WEBHOOK_URL }}
          title: 'Deployment Status'
          summary: 'Deployment to ${{ github.ref }} completed'
          text: |
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Status: ${{ job.status }}
            Workflow: ${{ github.workflow }}