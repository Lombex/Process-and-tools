name: CI/CD Workflow for CSharpAPI

on:
  push:
    branches: [ "Development_CI/CD#2.4" ]
  pull_request:
    branches: [ "Development_CI/CD#2.4" ]

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_PATH: './CSharpAPI/CSharpAPI.csproj'
  TEST_PROJECT_PATH: './Integration.Tests/Integration.Tests.csproj'
  UNIT_TEST_PROJECT_PATH: './Unit.Tests/Unit.Tests.csproj'
  MINIMUM_CODE_COVERAGE: 1

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore ${{ env.PROJECT_PATH }}

      - name: Build
        run: dotnet build ${{ env.PROJECT_PATH }} --configuration Release --no-restore

      - name: Run Tests and Collect Coverage
        run: |
          dotnet test ${{ env.TEST_PROJECT_PATH }} --no-restore --collect:"XPlat Code Coverage"
          dotnet test ${{ env.UNIT_TEST_PROJECT_PATH }} --no-restore --collect:"XPlat Code Coverage"
        env:
          DOTNET_CLI_TELEMETRY_OPTOUT: 1

      - name: Generate Coverage Report
        run: |
          reportgenerator "-reports:**/coverage.cobertura.xml" "-targetdir:coveragereport" "-reporttypes:HtmlInline;Cobertura"
          cat coveragereport/index.html
        continue-on-error: true # Ensure workflow continues even if coverage is low

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coveragereport/

  publish:
    needs: build-and-test
    if: github.ref == 'refs/heads/Development_CI/CD#2.4' && needs.build-and-test.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Publish Artifacts
        run: echo "Publishing build artifacts..."

      - name: Auto Merge to Master
        run: |
          git config --global user.email "noreply@example.com"
          git config --global user.name "GitHub Actions"
          git fetch
          git checkout master
          git merge --no-ff ${{ github.sha }} -m "Merging successful build ${{ github.sha }} from Development_CI/CD#2.4"
          git push origin master

  coverage-summary:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Download Coverage Report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report

      - name: Display Coverage Summary
        run: cat coveragereport/index.html
